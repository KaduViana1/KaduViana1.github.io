---
import { Image } from "astro:assets";

type Props = {
  projectInfo: {
    nome: string;
    nomeEn: string;
    imagens: string[];
    links: {
      deploy?: string;
      "github-front"?: string;
      "github-back"?: string;
      docker?: string;
    };
    libs: string[];
    EN: string;
    PT: string;
  };
};

const { projectInfo } = Astro.props;

const description = projectInfo.EN.split(". ");
---

<div
  class="projeto-animation opacity-0 min-h-fit md:max-w-none m-auto flex flex-col lg:flex-row bg-black/[0.5] shadow-xl shadow-black border-silver border-2 rounded-lg overflow-hidden"
>
  <img
    class="w-full lg:w-2/5 lg:min-w-[25%] border-b-2 md:border-b-0 md:border-r-2 border-silver"
    src={projectInfo.imagens[0]}
    alt=""
  />
  <div
    class="flex flex-col gap-y-2 gap-x-2 pt-4 pb-1 lg:pb-0 px-2 md:p-2 w-full text-start"
  >
    <div
      class="flex flex-col-reverse md:flex-row justify-between itens-center md:items-center w-full"
    >
      <h1 class="text-2xl self-center mt-3 lg:mt-0">{projectInfo.nomeEn}</h1>
      <div class="flex gap-1">
        {
          projectInfo.libs &&
            projectInfo.libs.map((lib) => (
              <img
                src={`/icons/${lib}.png`}
                class="w-6 h-6 rounded-sm"
                title={lib.toUpperCase()}
              />
            ))
        }
      </div>
    </div>
    <div class="text-center md:text-start">
      {description?.map((d) => <p>{d}.</p>)}
    </div>
    <div class="flex gap-4 text-sm underline ml-auto mt-auto text-center">
      {
        projectInfo.links.deploy && (
          <a
            class="hover:text-yellow-300 text-gold"
            href={projectInfo.links.deploy}
            target="_blank"
          >
            Go to site
          </a>
        )
      }
      {
        projectInfo.links["github-front"] && (
          <a
            class="hover:text-yellow-300 text-gold"
            href={projectInfo.links["github-front"]}
            target="_blank"
          >
            Front-end repository
          </a>
        )
      }
      {
        projectInfo.links["github-back"] && (
          <a
            class="hover:text-yellow-300 text-gold"
            href={projectInfo.links["github-back"]}
            target="_blank"
          >
            Back-end repository
          </a>
        )
      }
      {
        projectInfo.links.docker && (
          <a
            class="hover:text-yellow-300 text-gold"
            href={projectInfo.links.docker}
            target="_blank"
          >
            Docker image
          </a>
        )
      }
    </div>
  </div>
</div>

<script>
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add("projeto");
        }
      });
    },
    { threshold: 0.4 },
  );

  const projetos = document.querySelectorAll(".projeto-animation");

  projetos.forEach((projeto) => {
    observer.observe(projeto);
  });
</script>

<style>
  .projeto {
  }

  .projeto:nth-child(1n) {
    animation: projeto1 1.5s ease-in-out forwards;
  }

  .projeto:nth-child(2n) {
    animation: projeto2 1.5s ease-in-out forwards;
  }

  @keyframes projeto1 {
    0% {
      opacity: 0;
      transform: translateX(-30%);
    }

    100% {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes projeto2 {
    0% {
      opacity: 0;
      transform: translateX(30%);
    }

    100% {
      opacity: 1;
      transform: translateX(0);
    }
  }
</style>
